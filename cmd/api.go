package main

import (
	"fmt"
	"image"
	"image/jpeg"
	"log"
	"net/http"

	"github.com/ggicci/httpin"
	"github.com/go-playground/validator/v10"
)

type Period string

const (
	OVERALL       Period = "overall"
	SEVEN_DAYS    Period = "7day"
	ONE_MONTH     Period = "1month"
	THREE_MONTHS  Period = "3month"
	SIX_MONTHS    Period = "6month"
	TWELVE_MONTHS Period = "12month"
)

// Seems stupid but was generated by copilot so ¯\_(ツ)_/¯
func getPeriodFromStr(s string) Period {
	switch s {
	case "overall":
		return OVERALL
	case "7day":
		return SEVEN_DAYS
	case "1month":
		return ONE_MONTH
	case "3month":
		return THREE_MONTHS
	case "6month":
		return SIX_MONTHS
	case "12month":
		return TWELVE_MONTHS
	default:
		return OVERALL
	}
}

func validatePeriod(fl validator.FieldLevel) bool {
	period := Period(fl.Field().String())
	switch period {
	case OVERALL, SEVEN_DAYS, ONE_MONTH, THREE_MONTHS, SIX_MONTHS, TWELVE_MONTHS:
		return true
	default:
		return false
	}
}

type CollageRequest struct {
	Rows          int    `in:"query=rows;default=3" validate:"required,gte=1,lte=15"`
	Columns       int    `in:"query=columns;default=3" validate:"required,gte=1,lte=15"`
	Username      string `in:"query=username;required" validate:"required"`
	Period        string `in:"query=period;default=7day" validate:"required,validatePeriod"`
	DisplayArtist bool   `in:"query=artist;default=false"`
	DisplayAlbum  bool   `in:"query=album;default=false"`
	PlayCount     bool   `in:"query=playcount;default=false"`
}

func getCollage(request *CollageRequest) (image.Image, error) {
	count := request.Rows * request.Columns
	imageSize := "extralarge"
	imageDimension := 300
	var fontSize float64 = 12
	if count > 100 {
		imageSize = "large"
		imageDimension = 174
		fontSize = 8
	}

	period := getPeriodFromStr(request.Period)
	albums, err := getAlbums(request.Username, period, count, imageSize)
	if err != nil {
		log.Println(err)
		return nil, err
	}

	err = downloadImagesForAlbums(albums)
	if err != nil {
		// skip the album art if it doesn't exist
		log.Println(err)
	}

	displayOptions := DisplayOptions{
		ArtistName: request.DisplayArtist,
		AlbumName:  request.DisplayAlbum,
		PlayCount:  request.PlayCount,
	}

	collage, _ := createCollage(albums, request.Rows, request.Columns, imageDimension, fontSize, displayOptions)
	return collage, err
}

func collage(w http.ResponseWriter, r *http.Request) {
	request := r.Context().Value(httpin.Input).(*CollageRequest)

	validate := validator.New()
	validate.RegisterValidation("validatePeriod", validatePeriod)

	err := validate.Struct(request)
	if err != nil {
		log.Println(err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	response, err := getCollage(request)
	if err != nil {
		log.Println(err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "image/jpeg")
	err = jpeg.Encode(w, response, nil)
	if err != nil {
		log.Println(err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
}

func status(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "API running")
}
